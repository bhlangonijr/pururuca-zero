buildscript {
    ext.kotlin_version = '1.6.20'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'idea'

group 'com.github.bhlangonijr.chess'
version '0.1.2'

jar {
    manifest {
        attributes 'Main-Class': 'com.github.bhlangonijr.pururucazero.MainKt'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = 'include'
    zip64 = true
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "ml.dmlc:xgboost4j_2.12:1.4.1"
    implementation "org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1"
    implementation "org.deeplearning4j:deeplearning4j-nn:1.0.0-M2.1"
    implementation "org.deeplearning4j:deeplearning4j-datavec-iterators:1.0.0-M2.1"
    implementation "org.nd4j:nd4j-native-platform:1.0.0-M2.1"
    implementation "org.nd4j:nd4j-cuda-11.4-platform:1.0.0-M2.1"

    implementation "org.nd4j:nd4j-native-platform:1.0.0-M2.1"
    implementation "com.github.bhlangonijr:chesslib:1.3.3"
    implementation "org.slf4j:slf4j-api:1.7.32"
    implementation "org.slf4j:slf4j-simple:1.7.32"

    testImplementation "junit:junit:4.12"
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

// Tasks
test {
    String testType = System.properties['test.type']
    if (testType == 'integration') {
        include '**/*IntegrationTest.*'
        include '**/*IntegrationSpec.*'
    } else if (testType == 'unit') {
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    } else if (testType == 'all') {
        include '**/*Test.*'
        include '**/*Spec.*'
    } else {
        //Default to unit
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    }

    // Prints getResults of test inline
    afterSuite { desc, result ->
        // Don't report on modules with no test suites
        if (!desc.className) {
            return
        }

        String testStatus
        if (System.properties['nocolor']) {
            testStatus = result.resultType
        } else if (result.resultType != TestResult.ResultType.SUCCESS) {
            // Print in red if failed
            testStatus = "\033[31m${result.resultType}\033[0m"
        } else {
            // Print in green if success/skipped
            testStatus = "\033[32m${result.resultType}\033[0m"
        }
        println "Test suite ${desc.name}: ${testStatus}"
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests :D'
    group = 'Verification'
    include '**/*IntegrationTest.*'
    include '**/*IntegrationSpec.*'
    afterSuite { desc, result ->
        if (desc.className) {
            println "Test suite ${desc.name}: ${result.resultType}"
        }
    }
    testLogging {
        showStandardStreams = true
    }
}